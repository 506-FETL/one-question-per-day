import{_ as i,c as a,o as n,ah as h}from"./chunks/framework.CIgZr41i.js";const g=JSON.parse('{"title":"Array.from","description":"","frontmatter":{},"headers":[],"relativePath":"review/base/06.md","filePath":"review/base/06.md","lastUpdated":1760792690000}'),t={name:"review/base/06.md"};function l(e,s,k,p,r,d){return n(),a("div",null,[...s[0]||(s[0]=[h(`<h1 id="array-from" tabindex="-1">Array.from <a class="header-anchor" href="#array-from" aria-label="Permalink to “Array.from”">​</a></h1><h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to “题目描述”">​</a></h2><p>手写实现 <strong>Array.from 方法</strong>，要求：</p><ul><li>将类数组对象或可迭代对象转换为数组</li><li>支持可选的映射函数 mapFn</li><li>支持可选的 this 绑定 thisArg</li><li>实现辅助函数 toInteger 和 toLength</li><li>完整的参数验证和错误处理</li></ul><p>本题考查 <strong>ES6 规范理解</strong>、<strong>类型检测</strong> 和 <strong>函数式编程</strong> 的综合能力。</p><h2 id="核心知识点" tabindex="-1">核心知识点 <a class="header-anchor" href="#核心知识点" aria-label="Permalink to “核心知识点”">​</a></h2><h3 id="_1-array-from-的多重用途" tabindex="-1">1. Array.from 的多重用途 <a class="header-anchor" href="#_1-array-from-的多重用途" aria-label="Permalink to “1. Array.from 的多重用途”">​</a></h3><ul><li><strong>类数组转换</strong>: 将 NodeList、arguments 等转为真正数组</li><li><strong>可迭代对象转换</strong>: 处理 Set、Map、字符串等</li><li><strong>数组映射</strong>: 结合 map 功能，一步完成转换和处理</li><li><strong>填充数组</strong>: 配合 Array 构造函数创建指定长度数组</li></ul><h3 id="_2-类数组对象识别标准" tabindex="-1">2. 类数组对象识别标准 <a class="header-anchor" href="#_2-类数组对象识别标准" aria-label="Permalink to “2. 类数组对象识别标准”">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 类数组对象特征：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 有 length 属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. length 是非负整数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. 有对应索引的属性</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arrayLike</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;first&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;second&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;third&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  length: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-可迭代对象协议" tabindex="-1">3. 可迭代对象协议 <a class="header-anchor" href="#_3-可迭代对象协议" aria-label="Permalink to “3. 可迭代对象协议”">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实现 Symbol.iterator 方法的对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> iterable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [Symbol.iterator]() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    yield</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    yield</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    yield</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-ecmascript-规范中的抽象操作" tabindex="-1">4. ECMAScript 规范中的抽象操作 <a class="header-anchor" href="#_4-ecmascript-规范中的抽象操作" aria-label="Permalink to “4. ECMAScript 规范中的抽象操作”">​</a></h3><ul><li><strong>ToInteger</strong>: 将值转换为整数</li><li><strong>ToLength</strong>: 确保长度在安全范围内</li><li><strong>IsCallable</strong>: 检测值是否可调用</li><li><strong>GetMethod</strong>: 获取对象的方法</li></ul><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to “代码实现”">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 自定义实现 Array.from 方法，将类数组对象或可迭代对象转换为数组。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {ArrayLike|Iterable}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrayLike</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 类数组对象或可迭代对象。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Function}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [mapFn]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 可选的映射函数，用于对每个元素进行处理。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {*}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [thisArg]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 可选的上下文对象，用于绑定 \`mapFn\` 的 \`this\` 值。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Array}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 返回一个新数组，包含从 \`arrayLike\` 转换而来的元素。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@throws</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {TypeError}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 如果 \`arrayLike\` 为 null 或 undefined，抛出类型错误。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@throws</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {TypeError}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 如果提供的 \`mapFn\` 不是函数，抛出类型错误。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arrayLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mapFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">thisArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isCallable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;function&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fn) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;[object Function]&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toInteger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> _v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_v))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isFinite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_v))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_v))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> maxSafeInteger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Number.MAX_SAFE_INTEGER</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toLength</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxSafeInteger)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RangeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;length exceeds MAX_SAFE_INTEGER&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (arrayLike </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      \`provided arrayLike must be an array-like object - not null/undefined\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> items</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrayLike </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrayLike </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrayLike </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrayLike </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakSet</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arrayLike]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arrayLike)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mapFn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;undefined&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isCallable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mapFn))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`provided mapFn must be a function\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(items.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(len)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items[i]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (mapFn) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      arr[i]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> thisArg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;undefined&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(current, i)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mapFn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(thisArg, current, i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="关键技术点-基于当前实现的真实行为" tabindex="-1">关键技术点（基于当前实现的真实行为） <a class="header-anchor" href="#关键技术点-基于当前实现的真实行为" aria-label="Permalink to “关键技术点（基于当前实现的真实行为）”">​</a></h2><h3 id="_1-参数与类型校验" tabindex="-1">1. 参数与类型校验 <a class="header-anchor" href="#_1-参数与类型校验" aria-label="Permalink to “1. 参数与类型校验”">​</a></h3><ol><li><code>arrayLike == null</code>（<code>null</code> 或 <code>undefined</code>）直接抛 <code>TypeError</code>。</li><li>只有在显式传入 <code>mapFn</code>（非 <code>undefined</code>）时才校验其是否可调用，不接受时抛 <code>TypeError</code>。</li><li><code>thisArg</code> 不做任何合法性判断，直接在 <code>mapFn.call</code> 中使用。</li></ol><h3 id="_2-内部辅助函数实现细节" tabindex="-1">2. 内部辅助函数实现细节 <a class="header-anchor" href="#_2-内部辅助函数实现细节" aria-label="Permalink to “2. 内部辅助函数实现细节”">​</a></h3><p><code>toInteger</code> 行为：</p><ul><li><code>NaN → 0</code></li><li><code>±Infinity</code> 原样返回（不截断）</li><li>其它数值：带符号向下取整（<code>Math.floor(Math.abs(v))</code> 再恢复符号）</li></ul><p><code>toLength</code> 行为：</p><ul><li>先走 <code>toInteger</code></li><li>若结果大于 <code>Number.MAX_SAFE_INTEGER</code> 直接抛 <code>RangeError</code>（原生规范是“截断 clamp”，这里选择“抛错”）</li><li>负值归 0</li></ul><p>⚠ 与规范差异：原生 <code>ToLength</code> 不会因为超过范围抛错，而是截断到 <code>2^53 - 1</code>。</p><h3 id="_3-数据源标准化策略-核心分支" tabindex="-1">3. 数据源标准化策略（核心分支） <a class="header-anchor" href="#_3-数据源标准化策略-核心分支" aria-label="Permalink to “3. 数据源标准化策略（核心分支）”">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (arrayLike </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrayLike </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrayLike </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakMap</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrayLike </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arrayLike]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对 Set / Map 有效；对 WeakMap / WeakSet 运行时将抛错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arrayLike)</span></span></code></pre></div><ul><li>目标：把“可迭代集合”快速转为普通数组再按索引复制。</li><li>实际：<code>WeakMap</code> / <code>WeakSet</code> 无迭代接口，<code>[...weakSet]</code> 会抛 <code>TypeError</code>，当前代码并未过滤（潜在 Bug）。</li><li>其它对象直接 <code>Object()</code> 包装，只依赖其 <code>length</code>。若仅实现 <code>Symbol.iterator</code> 但无 <code>length</code>，结果长度会被推断为 0。</li></ul><h3 id="_4-长度获取与遍历方式" tabindex="-1">4. 长度获取与遍历方式 <a class="header-anchor" href="#_4-长度获取与遍历方式" aria-label="Permalink to “4. 长度获取与遍历方式”">​</a></h3><ul><li>唯一信息源：<code>items.length</code> → 经过 <code>toLength</code> 得到 <code>len</code>。</li><li>没有检测索引属性是否真实存在（不会判断 <code>i in items</code>），直接读取，缺失位置得到 <code>undefined</code> 并写入结果（与“原生空槽”语义不同——原生可能产生稀疏数组，这里是显式值）。</li></ul><h3 id="_5-结果数组构造策略" tabindex="-1">5. 结果数组构造策略 <a class="header-anchor" href="#_5-结果数组构造策略" aria-label="Permalink to “5. 结果数组构造策略”">​</a></h3><ul><li>先 <code>new Array(len)</code> 预分配；循环结束后再次 <code>arr.length = len</code>（冗余但无害）。</li><li>线性 O(len) 填充；无中间临时扩容逻辑。</li></ul><h3 id="_6-mapfn-执行语义" tabindex="-1">6. mapFn 执行语义 <a class="header-anchor" href="#_6-mapfn-执行语义" aria-label="Permalink to “6. mapFn 执行语义”">​</a></h3><ul><li>若存在 <code>mapFn</code>：每次调用形如： <ul><li>无 <code>thisArg</code>：<code>mapFn(current, index)</code></li><li>有 <code>thisArg</code>：<code>mapFn.call(thisArg, current, index)</code></li></ul></li><li>不包裹 try/catch；内部抛错直接冒泡。</li></ul><h3 id="_7-支持的数据类型范围-当前真实状态" tabindex="-1">7. 支持的数据类型范围（当前真实状态） <a class="header-anchor" href="#_7-支持的数据类型范围-当前真实状态" aria-label="Permalink to “7. 支持的数据类型范围（当前真实状态）”">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>行为</th><th>备注</th></tr></thead><tbody><tr><td>Array / 类数组（有 length）</td><td>正常复制</td><td>稀疏索引写入 <code>undefined</code></td></tr><tr><td>String</td><td>按 UTF-16 单元拆分（与原生一致，对合并表情拆分成两个 code unit 的情况未特别处理）</td><td></td></tr><tr><td>Set</td><td><code>[...set]</code> 复制后再一次写入</td><td>两次遍历成本</td></tr><tr><td>Map</td><td>生成 <code>[[k,v], ...]</code></td><td>行为与 <code>[...map]</code> 保持一致</td></tr><tr><td>WeakSet / WeakMap</td><td>运行时抛错</td><td>代码误判为可迭代</td></tr><tr><td>自定义 iterator 但无 length</td><td>返回 <code>[]</code></td><td>偏差：未真正消费迭代器</td></tr><tr><td>仅有 length 的对象</td><td>按索引读取</td><td>典型类数组场景</td></tr></tbody></table><h3 id="_8-与原生-array-from-的主要差异" tabindex="-1">8. 与原生 <code>Array.from</code> 的主要差异 <a class="header-anchor" href="#_8-与原生-array-from-的主要差异" aria-label="Permalink to “8. 与原生 Array.from 的主要差异”">​</a></h3><ol><li>缺失“通用 iterator”分支：不检测 <code>Symbol.iterator</code> 再逐步 <code>next()</code>。</li><li>没有迭代器关闭逻辑（无法保证异常时调用 <code>iterator.return()</code>）。</li><li><code>WeakMap</code> / <code>WeakSet</code> 错误地尝试展开。</li><li><code>ToLength</code> 超界抛错 vs 原生截断。</li><li>不支持 <code>this</code> 为构造函数的 species 机制（始终返回普通 <code>Array</code>）。</li><li>稀疏结果中使用显式 <code>undefined</code> 而非创建“空槽”（观察工具区别：<code>Object.keys</code> / <code>in</code> 行为）。</li><li>未对 mapFn 的参数数量或返回值做任何包装处理。</li></ol><h3 id="_9-异常与错误抛出策略" tabindex="-1">9. 异常与错误抛出策略 <a class="header-anchor" href="#_9-异常与错误抛出策略" aria-label="Permalink to “9. 异常与错误抛出策略”">​</a></h3><table tabindex="0"><thead><tr><th>场景</th><th>抛出</th><th>触发点</th></tr></thead><tbody><tr><td><code>arrayLike == null</code></td><td><code>TypeError</code></td><td>入口参数检验</td></tr><tr><td><code>mapFn</code> 非函数</td><td><code>TypeError</code></td><td>mapFn 校验</td></tr><tr><td>长度 &gt; <code>MAX_SAFE_INTEGER</code></td><td><code>RangeError</code></td><td><code>toLength</code> 中主动抛出</td></tr><tr><td><code>WeakSet</code> / <code>WeakMap</code></td><td><code>TypeError</code></td><td>展开阶段（由引擎抛）</td></tr><tr><td><code>mapFn</code> 内部异常</td><td>透传</td><td>循环调用时</td></tr></tbody></table><h3 id="_10-性能特征" tabindex="-1">10. 性能特征 <a class="header-anchor" href="#_10-性能特征" aria-label="Permalink to “10. 性能特征”">​</a></h3><ul><li>单次 O(n) 复制（数组 / 类数组）。</li><li>对 Set/Map：<code>[...x]</code> + 第二次写入，等价“两次遍历”。</li><li>无 fast-path：真数组 + 无 mapFn 仍逐元素赋值（可优化为 <code>slice()</code>）。</li></ul><h3 id="_11-边界行为速览" tabindex="-1">11. 边界行为速览 <a class="header-anchor" href="#_11-边界行为速览" aria-label="Permalink to “11. 边界行为速览”">​</a></h3><table tabindex="0"><thead><tr><th>输入</th><th>结果（当前实现）</th><th>备注</th></tr></thead><tbody><tr><td><code>{ length: -5 }</code></td><td><code>[]</code></td><td>负值归 0</td></tr><tr><td><code>{ length: 2.7, 0:&#39;a&#39;,1:&#39;b&#39; }</code></td><td><code>[&#39;a&#39;,&#39;b&#39;]</code></td><td>2.7 → 2</td></tr><tr><td>长度极大 &gt; MAX_SAFE_INTEGER</td><td>抛 <code>RangeError</code></td><td>与原生不同</td></tr><tr><td>纯 iterator（无 length）</td><td><code>[]</code></td><td>原生会消费 iterator</td></tr><tr><td>稀疏 <code>{0:&#39;a&#39;,2:&#39;c&#39;,length:4}</code></td><td><code>[&#39;a&#39;,undefined,&#39;c&#39;,undefined]</code></td><td>原生可能保留空槽</td></tr><tr><td><code>WeakSet()</code></td><td>直接抛错</td><td>试图展开</td></tr></tbody></table><h3 id="_12-可改进方向-按收益排序" tabindex="-1">12. 可改进方向（按收益排序） <a class="header-anchor" href="#_12-可改进方向-按收益排序" aria-label="Permalink to “12. 可改进方向（按收益排序）”">​</a></h3><ol><li>真正检测并消费 <code>Symbol.iterator</code>，统一 iterable 路径。</li><li>过滤掉 <code>WeakMap</code> / <code>WeakSet</code>，或在文档中声明不支持。</li><li><code>toLength</code> 改为 clamp 行为，贴合规范。</li><li>添加 fast-path（数组无 mapFn / 字符串无 mapFn）。</li><li>引入 iterator 关闭（<code>try/finally</code>）。</li><li>可选实现 species（支持子类化 <code>Array.from.call(SubClass, ...)</code>）。</li><li>区分“空槽”与 <code>undefined</code>（若教学需要展示稀疏数组特性）。</li><li>针对 Map 可开放自定义键值展开策略（仅值 / 仅键）。</li></ol>`,46)])])}const c=i(t,[["render",l]]);export{g as __pageData,c as default};
