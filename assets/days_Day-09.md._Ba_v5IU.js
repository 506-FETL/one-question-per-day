import{_ as a,c as e,o as r,ah as d,ai as s}from"./chunks/framework.CQPaoDZe.js";const y=JSON.parse('{"title":"Day 09","description":"","frontmatter":{},"headers":[],"relativePath":"days/Day-09.md","filePath":"days/Day-09.md","lastUpdated":1755921294000}'),l={name:"days/Day-09.md"};function o(n,t,i,p,h,_){return r(),e("div",null,[...t[0]||(t[0]=[d('<h1 id="day-09" tabindex="-1">Day 09 <a class="header-anchor" href="#day-09" aria-label="Permalink to “Day 09”">​</a></h1><h1 id="二叉树的垂直遍历" tabindex="-1">二叉树的垂直遍历 <a class="header-anchor" href="#二叉树的垂直遍历" aria-label="Permalink to “二叉树的垂直遍历”">​</a></h1><p>从左到右，从上到下遍历二叉树。二叉树的节点的值为整数。 <img src="'+s+'" alt="alt text"></p><p>上述二叉树的垂直遍历结果为：[6,4,2,7,1,9,10,3,8,5]</p><p>位于相同位置的不同节点的顺序应当继承自其各自的父节点。比如9和10，因为8在7之后，所以10在9之后。</p><p>| 更复杂的例子： <img src="https://cdn.bfe.dev/bfe/img/7g52BZ1fUZNxCJlEurAxtGrLNd54px7D_470x504_1604833181756.png" alt="交叉循环树"> 上述二叉树的垂直遍历结果为： [7, 2, 5, 8, 12, 1, 4, 6, 10, 11, 3, 9, 13]</p><h2 id="代码" tabindex="-1">代码 <a class="header-anchor" href="#代码" aria-label="Permalink to “代码”">​</a></h2><table tabindex="0"><thead><tr><th>类型</th><th>路径</th></tr></thead><tbody><tr><td>JS 答案</td><td>problems/days/Day 09/answer.js</td></tr><tr><td>TS 答案</td><td>problems/days/Day 09/ts/answer.ts</td></tr><tr><td>模板</td><td>problems/days/Day 09/ts/traverse.ts</td></tr><tr><td>测试</td><td>problems/days/Day 09/ts/traverse.spec.ts</td></tr></tbody></table>',8)])])}const m=a(l,[["render",o]]);export{y as __pageData,m as default};
