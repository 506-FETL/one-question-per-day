import{_ as a,c as i,o as n,ah as e}from"./chunks/framework.DOmOmoPg.js";const c=JSON.parse('{"title":"Day 10","description":"","frontmatter":{"tags":["this","原型链"],"difficulty":"medium"},"headers":[],"relativePath":"days/Day-10.md","filePath":"days/Day-10.md","lastUpdated":1755943774000}'),t={name:"days/Day-10.md"};function l(h,s,p,d,r,o){return n(),i("div",null,[...s[0]||(s[0]=[e(`<h1 id="day-10" tabindex="-1">Day 10 <a class="header-anchor" href="#day-10" aria-label="Permalink to “Day 10”">​</a></h1><h1 id="手写-call、apply、bind、instanceof-和-new" tabindex="-1">手写 call、apply、bind、instanceof 和 new <a class="header-anchor" href="#手写-call、apply、bind、instanceof-和-new" aria-label="Permalink to “手写 call、apply、bind、instanceof 和 new”">​</a></h1><h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to “题目描述”">​</a></h2><p>请你分别实现以下几个 JavaScript 基础原理相关的方法：</p><ol><li><p><strong>手写 call 方法</strong> 实现一个自定义的 <code>Call</code> 方法，使其能模拟原生 <code>Function.prototype.call</code> 的功能。</p></li><li><p><strong>手写 apply 方法</strong> 实现一个自定义的 <code>Apply</code> 方法，使其能模拟原生 <code>Function.prototype.apply</code> 的功能。</p></li><li><p><strong>手写 bind 方法</strong> 实现一个自定义的 <code>Bind</code> 方法，使其能模拟原生 <code>Function.prototype.bind</code> 的功能，并且能正确处理作为构造函数使用的情况。</p></li><li><p><strong>手写 instanceof 方法</strong> 实现一个函数 <code>instanceOf(obj, Fn)</code>，判断 <code>obj</code> 是否为构造函数 <code>Fn</code> 的实例，模拟原生 <code>instanceof</code> 运算符的行为。</p></li><li><p><strong>手写 new 操作符</strong> 实现一个函数 <code>selfNew(Fn, ...args)</code>，模拟 <code>new Fn(...args)</code> 的行为，返回一个新对象，并正确处理构造函数返回对象的情况。</p></li></ol><h2 id="要求" tabindex="-1">要求 <a class="header-anchor" href="#要求" aria-label="Permalink to “要求”">​</a></h2><ul><li>不允许直接使用原生的 <code>call</code>、<code>apply</code>、<code>bind</code>、<code>instanceof</code>、<code>new</code>。</li><li>代码需考虑边界情况和兼容性。</li><li>每个方法请用注释说明实现思路。</li></ul><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to “示例”">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;Tom&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dog</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> selfNew</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Animal);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instanceOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dog, Animal)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div><h2 id="答案" tabindex="-1">答案 <a class="header-anchor" href="#答案" aria-label="Permalink to “答案”">​</a></h2><table tabindex="0"><thead><tr><th>类型</th><th>路径</th></tr></thead><tbody><tr><td>JS 版本</td><td><a href="https://github.com/506-FETL/one-question-per-day/blob/main/problems/days/Day%2010/answer.js" target="_blank" rel="noreferrer">problems/days/Day 10/answer.js</a></td></tr><tr><td>TS 版本</td><td><a href="https://github.com/506-FETL/one-question-per-day/blob/main/problems/days/Day%2010/ts/answer.ts" target="_blank" rel="noreferrer">problems/days/Day 10/ts/answer.ts</a></td></tr><tr><td>Review</td><td><a href="/one-question-per-day/review/10">10.md</a></td></tr></tbody></table>`,11)])])}const y=a(t,[["render",l]]);export{c as __pageData,y as default};
