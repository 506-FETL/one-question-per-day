import{_ as a,c as i,o as t,ah as n}from"./chunks/framework.ZmvssKF5.js";const y=JSON.parse('{"title":"Day 05","description":"","frontmatter":{},"headers":[],"relativePath":"days/Day-05.md","filePath":"days/Day-05.md","lastUpdated":1755921870000}'),e={name:"days/Day-05.md"};function l(h,s,p,d,r,k){return t(),i("div",null,[...s[0]||(s[0]=[n(`<h1 id="day-05" tabindex="-1">Day 05 <a class="header-anchor" href="#day-05" aria-label="Permalink to “Day 05”">​</a></h1><h1 id="实现一个-深拷贝" tabindex="-1">实现一个 深拷贝 <a class="header-anchor" href="#实现一个-深拷贝" aria-label="Permalink to “实现一个 深拷贝”">​</a></h1><ul><li>要求:能够解决循环嵌套对象的深拷贝函数</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 测试代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a.self </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 循环引用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deepClone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: { name: &#39;Alice&#39;, self: [Circular] }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">console.log 的输出结果中包含 [Circular] 是因为 JavaScript 的控制台会检测到对象中的循环引用，并用这个标记来表示，避免陷入无限循环。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">事实上，我们的 deepClone 函数并不会在实际对象数据结构中插入 [Circular] 这类标记，它只是一个视觉化的提示，帮助我们理解输出结果。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div><h2 id="代码" tabindex="-1">代码 <a class="header-anchor" href="#代码" aria-label="Permalink to “代码”">​</a></h2><table tabindex="0"><thead><tr><th>类型</th><th>路径</th></tr></thead><tbody><tr><td>JS 答案</td><td>problems/days/Day 05/answer.js</td></tr><tr><td>TS 答案</td><td>problems/days/Day 05/ts/answer.ts</td></tr><tr><td>模板</td><td>problems/days/Day 05/ts/deepClone.ts</td></tr><tr><td>测试</td><td>problems/days/Day 05/ts/deepClone.spec.ts</td></tr></tbody></table>`,6)])])}const c=a(e,[["render",l]]);export{y as __pageData,c as default};
