import{_ as e,c as t,o,ah as r}from"./chunks/framework.CQPaoDZe.js";const _=JSON.parse('{"title":"Day 12","description":"","frontmatter":{},"headers":[],"relativePath":"days/Day-12.md","filePath":"days/Day-12.md","lastUpdated":1755921294000}'),d={name:"days/Day-12.md"};function s(c,a,n,p,h,l){return o(),t("div",null,[...a[0]||(a[0]=[r('<h1 id="day-12" tabindex="-1">Day 12 <a class="header-anchor" href="#day-12" aria-label="Permalink to “Day 12”">​</a></h1><h1 id="实现一个-compose-函数" tabindex="-1">实现一个 <code>compose</code> 函数 <a class="header-anchor" href="#实现一个-compose-函数" aria-label="Permalink to “实现一个 compose 函数”">​</a></h1><p>在函数式编程当中有一个很重要的概念就是<strong>函数组合</strong>，实际上就是把处理数据的函数像管道一样连接起来，然后让数据穿过管道得到最终的结果</p><p>在多个框架源码中都有用到，比如 <code>redux</code> <code>koa</code> 中多次遇到这个方法</p><p>效果： 将一系列函数，通过compose函数组合起来，像管道一样连接起来，比如函数结合[f, g, h ]，通过 compose 最终达到这样的效果： h(g(f()))</p><p><strong>compose 函数要求：可执行同步方法，也可执行异步方法，两者都可以兼容</strong></p><h2 id="代码" tabindex="-1">代码 <a class="header-anchor" href="#代码" aria-label="Permalink to “代码”">​</a></h2><table tabindex="0"><thead><tr><th>类型</th><th>路径</th></tr></thead><tbody><tr><td>JS 答案</td><td>problems/days/Day 12/answer.js</td></tr></tbody></table>',8)])])}const m=e(d,[["render",s]]);export{_ as __pageData,m as default};
