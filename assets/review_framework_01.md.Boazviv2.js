import{_ as s,c as l,o as a,ah as e}from"./chunks/framework.CIgZr41i.js";const g=JSON.parse('{"title":"Button","description":"","frontmatter":{},"headers":[],"relativePath":"review/framework/01.md","filePath":"review/framework/01.md","lastUpdated":1757737045000}'),o={name:"review/framework/01.md"};function t(n,i,d,r,c,h){return a(),l("div",null,[...i[0]||(i[0]=[e(`<h1 id="button" tabindex="-1">Button <a class="header-anchor" href="#button" aria-label="Permalink to “Button”">​</a></h1><h2 id="一、目标" tabindex="-1">一、目标 <a class="header-anchor" href="#一、目标" aria-label="Permalink to “一、目标”">​</a></h2><p>实现一个 <strong>功能完善、可复用、可扩展</strong> 的 <code>Button</code> 组件，具备以下特性：</p><ul><li>✅ 支持多种 <strong>外观 (variant)</strong> 与 <strong>尺寸 (size)</strong></li><li>✅ 支持 <strong>加载状态 (loading)</strong></li><li>✅ 支持 <strong>左/右图标 (leftIcon / rightIcon)</strong></li><li>✅ 支持 <strong>全宽模式 (fullWidth)</strong></li><li>✅ 语义化、可访问性良好（<code>aria-*</code> 属性）</li><li>✅ 基于 TypeScript</li></ul><h2 id="二、核心-props" tabindex="-1">二、核心 Props <a class="header-anchor" href="#二、核心-props" aria-label="Permalink to “二、核心 Props”">​</a></h2><ul><li><strong>variant</strong>: <code>&#39;default&#39; | &#39;destructive&#39; | &#39;outline&#39; | &#39;secondary&#39; | &#39;ghost&#39; | &#39;link&#39;</code> 控制按钮外观风格。</li><li><strong>size</strong>: <code>&#39;default&#39; | &#39;sm&#39; | &#39;lg&#39; | &#39;icon&#39;</code> 控制按钮尺寸。</li><li><strong>loading</strong>: <code>boolean</code> 是否进入加载状态。</li><li><strong>loadingText</strong>: <code>string</code> 提供加载时的替换文本。</li><li><strong>leftIcon / rightIcon</strong>: <code>ReactNode</code> 左/右图标。</li><li><strong>fullWidth</strong>: <code>boolean</code> 是否撑满整行。</li><li><strong>className</strong>: <code>string</code> 自定义样式扩展。</li><li><strong>type</strong>: <code>&#39;button&#39; | &#39;submit&#39; | &#39;reset&#39;</code> 默认值是 <code>&#39;button&#39;</code>。</li><li>其他原生 <code>button</code> 属性通过 <code>{...rest}</code> 透传。</li></ul><h2 id="三、样式组织思路" tabindex="-1">三、样式组织思路 <a class="header-anchor" href="#三、样式组织思路" aria-label="Permalink to “三、样式组织思路”">​</a></h2><ul><li><p><strong>baseClasses</strong>: 所有按钮共用的基础样式（对齐、字体、禁用态、焦点态等）。</p></li><li><p><strong>variantClasses</strong>: 不同外观对应的类（如 primary、outline、link）。</p></li><li><p><strong>sizeClasses</strong>: 不同尺寸对应的类（如 sm、lg、icon）。</p></li><li><p><strong>组合方式</strong>:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  baseClasses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  variantClasses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">variant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  sizeClasses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  fullWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ? </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;w-full&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  variant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方便调试/测试</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  className</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 允许外部覆盖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])}</span></span></code></pre></div></li></ul><h2 id="四、功能实现逻辑" tabindex="-1">四、功能实现逻辑 <a class="header-anchor" href="#四、功能实现逻辑" aria-label="Permalink to “四、功能实现逻辑”">​</a></h2><ol><li><p><strong>默认行为</strong></p><ul><li>默认 <code>type=&quot;button&quot;</code></li><li>支持传入自定义 <code>className</code></li><li>透传事件（如 <code>onClick</code>）</li></ul></li><li><p><strong>加载状态 (loading)</strong></p><ul><li>添加 <code>aria-busy=&quot;true&quot;</code></li><li>禁用按钮 (<code>disabled</code>)</li><li>隐藏右侧图标，避免干扰</li><li>若传入 <code>loadingText</code>，替换掉原文本</li></ul></li><li><p><strong>图标支持</strong></p><ul><li>左右图标用 <code>&lt;span&gt;</code> 包裹，控制间距</li><li>loading 时 <strong>只隐藏右图标</strong>，左图标可保留</li></ul></li><li><p><strong>可访问性 (a11y)</strong></p><ul><li><code>aria-busy</code> 标记加载中</li><li><code>disabled</code> 阻止交互</li><li><code>size=&quot;icon&quot;</code> 时需要 <code>aria-label</code>，否则无文本按钮不易被辅助工具识别</li></ul></li><li><p><strong>样式扩展</strong></p><ul><li><code>variant</code> 与 <code>size</code> 同时作用于 className 和 <code>data-*</code> 属性</li><li>测试时可通过 <code>className</code> 或 <code>data-attr</code> 判断</li></ul></li></ol><h2 id="五、测试点" tabindex="-1">五、测试点 <a class="header-anchor" href="#五、测试点" aria-label="Permalink to “五、测试点”">​</a></h2><ul><li><p><strong>基础渲染</strong></p><ul><li>渲染子元素内容</li><li>默认 <code>type=&quot;button&quot;</code></li><li><code>className</code> 可继承</li></ul></li><li><p><strong>事件处理</strong></p><ul><li>点击触发 <code>onClick</code></li><li><code>disabled</code> 时不触发点击</li><li>显式 <code>type</code> 可覆盖默认</li></ul></li><li><p><strong>外观与尺寸</strong></p><ul><li>切换 <code>variant</code> → 不同类名生效</li><li>切换 <code>size</code> → 不同类名生效</li><li><code>fullWidth</code> → 添加 <code>w-full</code></li></ul></li><li><p><strong>加载状态</strong></p><ul><li><code>aria-busy=&quot;true&quot;</code> &amp; <code>disabled</code></li><li><code>loadingText</code> 替换原文本</li><li>点击不会触发事件</li></ul></li><li><p><strong>图标</strong></p><ul><li>左右图标能渲染</li><li>loading 时隐藏右图标</li><li><code>size=&quot;icon&quot;</code> 时需 <code>aria-label</code></li></ul></li></ul><h2 id="六、关键知识点" tabindex="-1">六、关键知识点 <a class="header-anchor" href="#六、关键知识点" aria-label="Permalink to “六、关键知识点”">​</a></h2><ol><li><strong>组合 className</strong>：使用 <code>cn()</code> 函数高效拼接。</li><li><strong>React + TS 结合</strong>：Props 类型设计合理，兼顾扩展性与约束。</li><li><strong>可访问性保证</strong>：通过 <code>aria-*</code> 属性 &amp; <code>aria-label</code>。</li><li><strong>健壮性测试</strong>：覆盖功能点（交互 / 样式 / 状态 / 无障碍）。</li><li><strong>组件封装思想</strong>：职责清晰 → UI 外观 (variant/size)、状态管理 (loading/disabled)、可扩展性 (className、icon)。</li></ol><h2 id="七、复习清单" tabindex="-1">七、复习清单 <a class="header-anchor" href="#七、复习清单" aria-label="Permalink to “七、复习清单”">​</a></h2><ul><li>[ ] 掌握 <code>variant</code> / <code>size</code> 的实现方式与扩展思路</li><li>[ ] 理解 <code>loading</code> 与 <code>loadingText</code> 的逻辑分支</li><li>[ ] 理解如何通过 <code>aria-*</code> 与 <code>disabled</code> 提升可访问性</li><li>[ ] 复盘图标渲染逻辑（loading 时隐藏右图标）</li><li>[ ] 熟悉测试用例覆盖点，能根据需求写出断言</li></ul>`,16)])])}const k=s(o,[["render",t]]);export{g as __pageData,k as default};
